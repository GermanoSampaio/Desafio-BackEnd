services:
  # MongoDB com Replica Set
  mongodb:
    image: mongo:7.0
    container_name: mongodb-rs
    ports:
      - 27017:27017
    volumes:
      - mongo-data:/data/db
    networks:
      - backend
    healthcheck:
      test: echo 'db.stats().ok' | mongosh localhost:27017/test --quiet | grep 1
      interval: 10s
      timeout: 5s
      retries: 5


  # RabbitMQ com UI de gerenciamento
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - 5672:5672        # Porta para apps .NET
      - 15672:15672      # Interface web
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    networks:
      - backend
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MinIO (S3-compatible storage)
  minio:
    image: minio/minio
    container_name: minio
    command: server /data --console-address ":9001"
    ports:
      - 9100:9000        # API S3
      - 9003:9001        # Console Web
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio-data:/data
    networks:
      - backend
  
  api:
    container_name: motoservice-api
    build:
      context: ./src
      dockerfile: MotoService.API/Dockerfile
    ports:
      - 5000:5000
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      minio:
        condition: service_started
    networks:
      - backend
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      MongoDbSettings__ConnectionString: "mongodb://mongodb:27017"
      RabbitMqSettings__HostName: "rabbitmq"
      AWSSettings__ServiceURL: "http://minio:9000"

volumes:
  mongo-data:
  minio-data:

networks:
  backend:
    driver: bridge
